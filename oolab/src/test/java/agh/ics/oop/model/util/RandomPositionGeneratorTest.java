package agh.ics.oop.model.util;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

class RandomPositionGeneratorTest {

    @Test
    void testConstructorAndSize() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Test that the size is correctly set to the number of grass positions
        assertEquals(5, generator.size);
    }

    @Test
    void testGeneratedPositions() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Test that the generator has 5 positions
        assertEquals(5, generator.size);

        // Test that the positions are within the expected bounds
        for (Vector2d position : generator) {
            assertTrue(position.getX() >= 0 && position.getX() < 5);
            assertTrue(position.getY() >= 0 && position.getY() < 5);
        }
    }

    @Test
    void testGetHead() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Test that the head position is correctly retrieved
        Vector2d head = generator.getHead();
        assertNotNull(head);
        assertTrue(head.getX() >= 0 && head.getX() < 5);
        assertTrue(head.getY() >= 0 && head.getY() < 5);
    }

    @Test
    void testGetTail() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Test that the tail position is correctly retrieved
        Vector2d tail = generator.getTail();
        assertNotNull(tail);
        assertTrue(tail.getX() >= 0 && tail.getX() < 5);
        assertTrue(tail.getY() >= 0 && tail.getY() < 5);
    }

    @Test
    void testGetIndex() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Get the position at index 0 and check its index
        Vector2d firstPosition = generator.get(0);
        assertEquals(0, generator.getIndex(firstPosition));

        // Get the position at index 4 (tail) and check its index
        Vector2d lastPosition = generator.get(4);
        assertEquals(4, generator.getIndex(lastPosition));
    }

    @Test
    void testIterator() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        Iterator<Vector2d> iterator = generator.iterator();
        Vector2d previous = null;

        // Iterate through the positions and ensure they are not null and are in order
        while (iterator.hasNext()) {
            Vector2d current = iterator.next();
            assertNotNull(current);
            if (previous != null) {
                // Ensure the iterator does not go backwards
                assertTrue(generator.getIndex(current) > generator.getIndex(previous));
            }
            previous = current;
        }
    }

    @Test
    void testIteratorOrder() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Collect positions generated by the iterator
        List<Vector2d> positions = new ArrayList<>();
        for (Vector2d position : generator) {
            positions.add(position);
        }

        // Ensure that positions are not duplicated and are different from each other
        assertEquals(5, positions.size());
        for (int i = 0; i < positions.size(); i++) {
            for (int j = i + 1; j < positions.size(); j++) {
                assertNotEquals(positions.get(i), positions.get(j));
            }
        }
    }

    @Test
    void testUnsupportedRemove() {
        // Create a RandomPositionGenerator with maxWidth=5, maxHeight=5, and grassCount=5
        RandomPositionGenerator generator = new RandomPositionGenerator(5, 5, 5);

        // Test that removing elements is unsupported in the iterator
        Iterator<Vector2d> iterator = generator.iterator();
        assertThrows(UnsupportedOperationException.class, iterator::remove);
    }
}
